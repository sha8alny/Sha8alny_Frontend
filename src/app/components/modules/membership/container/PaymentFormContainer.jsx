"use client";
import { useState, useEffect } from "react";
import {
  useStripe,
  useElements,
  CardNumberElement,
  CardCvcElement,
  CardExpiryElement,
} from "@stripe/react-stripe-js";
import {
  processPaymentMonthly,
  processPaymentOneTime,
} from "@/app/services/payment";
import PaymentFormPresentation from "../presentation/PaymentFormPresentation";
import SuccessPaymentPresentation from "../presentation/SuccessPaymentPresentation";
import { useToast } from "@/app/context/ToastContext";

/**
 * @namespace membership
 * @module membership
 */
/**
 * PaymentFormContainer component handles the payment form logic and submission.
 * It integrates with Stripe for payment processing and displays either the payment form or success message based on the payment status.
 *
 * @component
 * @returns {JSX.Element} The rendered component.
 *
 * @prop {string} name - The cardholder's name.
 * @prop {function} setName - Function to set the cardholder's name.
 * @prop {string} country - The selected country.
 * @prop {function} setCountry - Function to set the selected country.
 * @prop {object} errors - Object containing form validation errors.
 * @prop {object} stripeStyle - Object containing styling for Stripe elements.
 * @prop {function} handleSubmit - Function to handle form submission.
 * @prop {boolean} loading - Indicates if the form is in the loading state.
 * @prop {string|null} cardError - Error message related to the card input , generated by stripe.
 * @prop {string} textColor - The color of the text in the Stripe elements.
 * @prop {string} premiumType - The selected premium plan type.
 * @prop {function} setPremiumType - Function to set the selected premium plan type.
 * @prop {number} monthlyCost - The cost of the monthly premium plan.
 * @prop {number} annualCost - The cost of the annual premium plan.
 * @prop {number} monthlyCostIfPaidAnnually - The monthly cost if the annual plan is selected.
 * @prop {number} savingsPercentage - The percentage of savings if the annual plan is selected.
 */

const PaymentFormContainer = () => {
  const stripe = useStripe();
  const elements = useElements();
  const showToast = useToast();
  const [name, setName] = useState("");
  const [country, setCountry] = useState("");
  const [cardError, setCardError] = useState(null);
  const [textColor, setTextColor] = useState("#191919");
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const [premiumType, setPremiumType] = useState("monthlyPremium");
  const [success, setSuccess] = useState(false);

  // price calculations logic
  const prices = { monthly: 9.99, annual: 99.99 };
  const monthlyCost = prices.monthly;
  const oneTimeCost = prices.annual;
  const monthlyCostIfPaidAnnually = oneTimeCost / 12;
  const savingsPercentage = Math.round(
    (1 - monthlyCostIfPaidAnnually / monthlyCost) * 100
  );
  // stripe element styling logic
  useEffect(() => {
    if (typeof window !== "undefined" && document?.documentElement) {
      const computedColor = getComputedStyle(document.documentElement)
        .getPropertyValue("--color-text")
        .trim();
      if (computedColor) setTextColor(computedColor);
    }
  });

  const stripeStyle = {
    base: {
      fontSize: "16px",
      color: textColor,
      "::placeholder": { color: "#a0a0a0" },
    },
    invalid: { color: "#9e2146" },
  };
  // validation logic
  const validateForm = () => {
    let newErrors = {};
    if (!name.trim()) newErrors.name = "Cardholder name is required";
    if (!country) newErrors.country = "Please select a country";
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  // stripe submission logic
  const handleSubmit = async (e) => {
    e.preventDefault();
    setCardError(null);

    if (!validateForm()) {
      setLoading(false);
      return;
    }

    if (!stripe || !elements) {
      setLoading(false);
      return;
    }

    const { token, error } = await stripe.createToken(
      elements.getElement(CardNumberElement),
      {
        name: name,
        address_country: country,
      }
    );
    setLoading(true);

    if (error) {
      setCardError(error.message || "Payment error");
      showToast(error.message || "Payment error", false);
      setLoading(false);
      return;
    }

    if (token) {
      try {
        const paymentData = {
          planId: premiumType,
          paymentMethod: "card",
          StripeToken: token.id,
        };
        let response = "dummy"
        if(premiumType == "monthlyPremium"){

           response = await processPaymentMonthly(paymentData);
        }
        else{
           response = await processPaymentOneTime(paymentData);
        }
        if (response.error) {
          showToast(response.error.message || "Payment failed", false);
          setCardError(response.error.message);
        }
        else{
          showToast("Payment successful", true);
          setSuccess(true);
        } 
      } catch (error) {
        showToast(
          error.message || "Payment failed",
          false
        );
      } finally {
        setLoading(false);
      }
    }
  };

  return success ? (
    <SuccessPaymentPresentation />
  ) : (
    <PaymentFormPresentation
      name={name}
      setName={setName}
      country={country}
      setCountry={setCountry}
      errors={errors}
      stripeStyle={stripeStyle}
      handleSubmit={handleSubmit}
      loading={loading}
      cardError={cardError}
      textColor={textColor}
      premiumType={premiumType}
      setPremiumType={setPremiumType}
      monthlyCost={monthlyCost}
      oneTimeCost={oneTimeCost}
      monthlyCostIfPaidAnnually={monthlyCostIfPaidAnnually}
      savingsPercentage={savingsPercentage}
    />
  );
};

export default PaymentFormContainer;
